// you can generate go models by the following command:
// protoc -I . divisions.proto --grpc-gateway_out . --go_out=plugins=grpc:.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.8
// source: divisions.proto

package go_proto

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataDivision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DivisionName string `protobuf:"bytes,2,opt,name=DivisionName,proto3" json:"DivisionName,omitempty"`
}

func (x *DataDivision) Reset() {
	*x = DataDivision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_divisions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataDivision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataDivision) ProtoMessage() {}

func (x *DataDivision) ProtoReflect() protoreflect.Message {
	mi := &file_divisions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataDivision.ProtoReflect.Descriptor instead.
func (*DataDivision) Descriptor() ([]byte, []int) {
	return file_divisions_proto_rawDescGZIP(), []int{0}
}

func (x *DataDivision) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DataDivision) GetDivisionName() string {
	if x != nil {
		return x.DivisionName
	}
	return ""
}

type ListDivisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListDivisionRequest) Reset() {
	*x = ListDivisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_divisions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDivisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDivisionRequest) ProtoMessage() {}

func (x *ListDivisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_divisions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDivisionRequest.ProtoReflect.Descriptor instead.
func (*ListDivisionRequest) Descriptor() ([]byte, []int) {
	return file_divisions_proto_rawDescGZIP(), []int{1}
}

type ListDivisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DataDivision `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListDivisionResponse) Reset() {
	*x = ListDivisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_divisions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDivisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDivisionResponse) ProtoMessage() {}

func (x *ListDivisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_divisions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDivisionResponse.ProtoReflect.Descriptor instead.
func (*ListDivisionResponse) Descriptor() ([]byte, []int) {
	return file_divisions_proto_rawDescGZIP(), []int{2}
}

func (x *ListDivisionResponse) GetData() []*DataDivision {
	if x != nil {
		return x.Data
	}
	return nil
}

type IdDivision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdDivision) Reset() {
	*x = IdDivision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_divisions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdDivision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdDivision) ProtoMessage() {}

func (x *IdDivision) ProtoReflect() protoreflect.Message {
	mi := &file_divisions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdDivision.ProtoReflect.Descriptor instead.
func (*IdDivision) Descriptor() ([]byte, []int) {
	return file_divisions_proto_rawDescGZIP(), []int{3}
}

func (x *IdDivision) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type StatusDivisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StatusDivisionResponse) Reset() {
	*x = StatusDivisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_divisions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusDivisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusDivisionResponse) ProtoMessage() {}

func (x *StatusDivisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_divisions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusDivisionResponse.ProtoReflect.Descriptor instead.
func (*StatusDivisionResponse) Descriptor() ([]byte, []int) {
	return file_divisions_proto_rawDescGZIP(), []int{4}
}

func (x *StatusDivisionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_divisions_proto protoreflect.FileDescriptor

var file_divisions_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x0c, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x15,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1c, 0x0a, 0x0a, 0x49, 0x64,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xb8, 0x03, 0x0a,
	0x0f, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x6d, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x5e, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x2e, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x2e, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x64, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0x6a, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x15, 0x2e, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x64,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x21, 0x2e, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6a, 0x0a, 0x0e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x21, 0x2e, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x1a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x0b, 0x5a, 0x09, 0x2f, 0x67, 0x6f, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_divisions_proto_rawDescOnce sync.Once
	file_divisions_proto_rawDescData = file_divisions_proto_rawDesc
)

func file_divisions_proto_rawDescGZIP() []byte {
	file_divisions_proto_rawDescOnce.Do(func() {
		file_divisions_proto_rawDescData = protoimpl.X.CompressGZIP(file_divisions_proto_rawDescData)
	})
	return file_divisions_proto_rawDescData
}

var file_divisions_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_divisions_proto_goTypes = []interface{}{
	(*DataDivision)(nil),           // 0: divisions.DataDivision
	(*ListDivisionRequest)(nil),    // 1: divisions.ListDivisionRequest
	(*ListDivisionResponse)(nil),   // 2: divisions.ListDivisionResponse
	(*IdDivision)(nil),             // 3: divisions.IdDivision
	(*StatusDivisionResponse)(nil), // 4: divisions.StatusDivisionResponse
}
var file_divisions_proto_depIdxs = []int32{
	0, // 0: divisions.ListDivisionResponse.data:type_name -> divisions.DataDivision
	1, // 1: divisions.DivisionService.ReadAllDivision:input_type -> divisions.ListDivisionRequest
	0, // 2: divisions.DivisionService.CreateDivision:input_type -> divisions.DataDivision
	3, // 3: divisions.DivisionService.DeleteDivision:input_type -> divisions.IdDivision
	0, // 4: divisions.DivisionService.UpdateDivision:input_type -> divisions.DataDivision
	2, // 5: divisions.DivisionService.ReadAllDivision:output_type -> divisions.ListDivisionResponse
	3, // 6: divisions.DivisionService.CreateDivision:output_type -> divisions.IdDivision
	4, // 7: divisions.DivisionService.DeleteDivision:output_type -> divisions.StatusDivisionResponse
	4, // 8: divisions.DivisionService.UpdateDivision:output_type -> divisions.StatusDivisionResponse
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_divisions_proto_init() }
func file_divisions_proto_init() {
	if File_divisions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_divisions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataDivision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_divisions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDivisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_divisions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDivisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_divisions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdDivision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_divisions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusDivisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_divisions_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_divisions_proto_goTypes,
		DependencyIndexes: file_divisions_proto_depIdxs,
		MessageInfos:      file_divisions_proto_msgTypes,
	}.Build()
	File_divisions_proto = out.File
	file_divisions_proto_rawDesc = nil
	file_divisions_proto_goTypes = nil
	file_divisions_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DivisionServiceClient is the client API for DivisionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DivisionServiceClient interface {
	ReadAllDivision(ctx context.Context, in *ListDivisionRequest, opts ...grpc.CallOption) (*ListDivisionResponse, error)
	CreateDivision(ctx context.Context, in *DataDivision, opts ...grpc.CallOption) (*IdDivision, error)
	DeleteDivision(ctx context.Context, in *IdDivision, opts ...grpc.CallOption) (*StatusDivisionResponse, error)
	UpdateDivision(ctx context.Context, in *DataDivision, opts ...grpc.CallOption) (*StatusDivisionResponse, error)
}

type divisionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDivisionServiceClient(cc grpc.ClientConnInterface) DivisionServiceClient {
	return &divisionServiceClient{cc}
}

func (c *divisionServiceClient) ReadAllDivision(ctx context.Context, in *ListDivisionRequest, opts ...grpc.CallOption) (*ListDivisionResponse, error) {
	out := new(ListDivisionResponse)
	err := c.cc.Invoke(ctx, "/divisions.DivisionService/ReadAllDivision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *divisionServiceClient) CreateDivision(ctx context.Context, in *DataDivision, opts ...grpc.CallOption) (*IdDivision, error) {
	out := new(IdDivision)
	err := c.cc.Invoke(ctx, "/divisions.DivisionService/CreateDivision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *divisionServiceClient) DeleteDivision(ctx context.Context, in *IdDivision, opts ...grpc.CallOption) (*StatusDivisionResponse, error) {
	out := new(StatusDivisionResponse)
	err := c.cc.Invoke(ctx, "/divisions.DivisionService/DeleteDivision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *divisionServiceClient) UpdateDivision(ctx context.Context, in *DataDivision, opts ...grpc.CallOption) (*StatusDivisionResponse, error) {
	out := new(StatusDivisionResponse)
	err := c.cc.Invoke(ctx, "/divisions.DivisionService/UpdateDivision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DivisionServiceServer is the server API for DivisionService service.
type DivisionServiceServer interface {
	ReadAllDivision(context.Context, *ListDivisionRequest) (*ListDivisionResponse, error)
	CreateDivision(context.Context, *DataDivision) (*IdDivision, error)
	DeleteDivision(context.Context, *IdDivision) (*StatusDivisionResponse, error)
	UpdateDivision(context.Context, *DataDivision) (*StatusDivisionResponse, error)
}

// UnimplementedDivisionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDivisionServiceServer struct {
}

func (*UnimplementedDivisionServiceServer) ReadAllDivision(context.Context, *ListDivisionRequest) (*ListDivisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllDivision not implemented")
}
func (*UnimplementedDivisionServiceServer) CreateDivision(context.Context, *DataDivision) (*IdDivision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDivision not implemented")
}
func (*UnimplementedDivisionServiceServer) DeleteDivision(context.Context, *IdDivision) (*StatusDivisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDivision not implemented")
}
func (*UnimplementedDivisionServiceServer) UpdateDivision(context.Context, *DataDivision) (*StatusDivisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDivision not implemented")
}

func RegisterDivisionServiceServer(s *grpc.Server, srv DivisionServiceServer) {
	s.RegisterService(&_DivisionService_serviceDesc, srv)
}

func _DivisionService_ReadAllDivision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDivisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivisionServiceServer).ReadAllDivision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/divisions.DivisionService/ReadAllDivision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivisionServiceServer).ReadAllDivision(ctx, req.(*ListDivisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DivisionService_CreateDivision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataDivision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivisionServiceServer).CreateDivision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/divisions.DivisionService/CreateDivision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivisionServiceServer).CreateDivision(ctx, req.(*DataDivision))
	}
	return interceptor(ctx, in, info, handler)
}

func _DivisionService_DeleteDivision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdDivision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivisionServiceServer).DeleteDivision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/divisions.DivisionService/DeleteDivision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivisionServiceServer).DeleteDivision(ctx, req.(*IdDivision))
	}
	return interceptor(ctx, in, info, handler)
}

func _DivisionService_UpdateDivision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataDivision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivisionServiceServer).UpdateDivision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/divisions.DivisionService/UpdateDivision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivisionServiceServer).UpdateDivision(ctx, req.(*DataDivision))
	}
	return interceptor(ctx, in, info, handler)
}

var _DivisionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "divisions.DivisionService",
	HandlerType: (*DivisionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadAllDivision",
			Handler:    _DivisionService_ReadAllDivision_Handler,
		},
		{
			MethodName: "CreateDivision",
			Handler:    _DivisionService_CreateDivision_Handler,
		},
		{
			MethodName: "DeleteDivision",
			Handler:    _DivisionService_DeleteDivision_Handler,
		},
		{
			MethodName: "UpdateDivision",
			Handler:    _DivisionService_UpdateDivision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "divisions.proto",
}
