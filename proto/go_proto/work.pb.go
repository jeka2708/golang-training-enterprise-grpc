// you can generate go models by the following command:
// protoc -I . work.proto --grpc-gateway_out . --go_out=plugins=grpc:.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.8
// source: work.proto

package go_proto

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FirstName   string `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName    string `protobuf:"bytes,3,opt,name=LastName,proto3" json:"LastName,omitempty"`
	MiddleName  string `protobuf:"bytes,4,opt,name=MiddleName,proto3" json:"MiddleName,omitempty"`
	PhoneNumber string `protobuf:"bytes,5,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	Name        string `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`
	Cost        string `protobuf:"bytes,7,opt,name=Cost,proto3" json:"Cost,omitempty"`
	WorkerId    int64  `protobuf:"varint,8,opt,name=WorkerId,proto3" json:"WorkerId,omitempty"`
	ServiceId   int64  `protobuf:"varint,9,opt,name=ServiceId,proto3" json:"ServiceId,omitempty"`
}

func (x *DataWork) Reset() {
	*x = DataWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_work_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataWork) ProtoMessage() {}

func (x *DataWork) ProtoReflect() protoreflect.Message {
	mi := &file_work_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataWork.ProtoReflect.Descriptor instead.
func (*DataWork) Descriptor() ([]byte, []int) {
	return file_work_proto_rawDescGZIP(), []int{0}
}

func (x *DataWork) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DataWork) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *DataWork) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *DataWork) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *DataWork) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *DataWork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataWork) GetCost() string {
	if x != nil {
		return x.Cost
	}
	return ""
}

func (x *DataWork) GetWorkerId() int64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *DataWork) GetServiceId() int64 {
	if x != nil {
		return x.ServiceId
	}
	return 0
}

type ListWorkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListWorkRequest) Reset() {
	*x = ListWorkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_work_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkRequest) ProtoMessage() {}

func (x *ListWorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_work_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkRequest.ProtoReflect.Descriptor instead.
func (*ListWorkRequest) Descriptor() ([]byte, []int) {
	return file_work_proto_rawDescGZIP(), []int{1}
}

type ListWorkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DataWork `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListWorkResponse) Reset() {
	*x = ListWorkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_work_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkResponse) ProtoMessage() {}

func (x *ListWorkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_work_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkResponse.ProtoReflect.Descriptor instead.
func (*ListWorkResponse) Descriptor() ([]byte, []int) {
	return file_work_proto_rawDescGZIP(), []int{2}
}

func (x *ListWorkResponse) GetData() []*DataWork {
	if x != nil {
		return x.Data
	}
	return nil
}

type IdWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdWork) Reset() {
	*x = IdWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_work_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdWork) ProtoMessage() {}

func (x *IdWork) ProtoReflect() protoreflect.Message {
	mi := &file_work_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdWork.ProtoReflect.Descriptor instead.
func (*IdWork) Descriptor() ([]byte, []int) {
	return file_work_proto_rawDescGZIP(), []int{3}
}

func (x *IdWork) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type StatusWorkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StatusWorkResponse) Reset() {
	*x = StatusWorkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_work_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusWorkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusWorkResponse) ProtoMessage() {}

func (x *StatusWorkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_work_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusWorkResponse.ProtoReflect.Descriptor instead.
func (*StatusWorkResponse) Descriptor() ([]byte, []int) {
	return file_work_proto_rawDescGZIP(), []int{4}
}

func (x *StatusWorkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_work_proto protoreflect.FileDescriptor

var file_work_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x77, 0x6f,
	0x72, 0x6b, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf8, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x36,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x18, 0x0a, 0x06, 0x49, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0xcc, 0x02, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x53, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x12,
	0x15, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x57,
	0x6f, 0x72, 0x6b, 0x1a, 0x0c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x49, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x50, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x0c, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x49, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x1a, 0x18, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x50, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x1a, 0x18, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x1a, 0x0d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x42,
	0x0b, 0x5a, 0x09, 0x2f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_work_proto_rawDescOnce sync.Once
	file_work_proto_rawDescData = file_work_proto_rawDesc
)

func file_work_proto_rawDescGZIP() []byte {
	file_work_proto_rawDescOnce.Do(func() {
		file_work_proto_rawDescData = protoimpl.X.CompressGZIP(file_work_proto_rawDescData)
	})
	return file_work_proto_rawDescData
}

var file_work_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_work_proto_goTypes = []interface{}{
	(*DataWork)(nil),           // 0: work.DataWork
	(*ListWorkRequest)(nil),    // 1: work.ListWorkRequest
	(*ListWorkResponse)(nil),   // 2: work.ListWorkResponse
	(*IdWork)(nil),             // 3: work.IdWork
	(*StatusWorkResponse)(nil), // 4: work.StatusWorkResponse
}
var file_work_proto_depIdxs = []int32{
	0, // 0: work.ListWorkResponse.data:type_name -> work.DataWork
	1, // 1: work.WorkService.ReadAllWork:input_type -> work.ListWorkRequest
	0, // 2: work.WorkService.CreateWork:input_type -> work.DataWork
	3, // 3: work.WorkService.DeleteWork:input_type -> work.IdWork
	0, // 4: work.WorkService.UpdateWork:input_type -> work.DataWork
	2, // 5: work.WorkService.ReadAllWork:output_type -> work.ListWorkResponse
	3, // 6: work.WorkService.CreateWork:output_type -> work.IdWork
	4, // 7: work.WorkService.DeleteWork:output_type -> work.StatusWorkResponse
	4, // 8: work.WorkService.UpdateWork:output_type -> work.StatusWorkResponse
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_work_proto_init() }
func file_work_proto_init() {
	if File_work_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_work_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_work_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_work_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_work_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_work_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusWorkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_work_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_work_proto_goTypes,
		DependencyIndexes: file_work_proto_depIdxs,
		MessageInfos:      file_work_proto_msgTypes,
	}.Build()
	File_work_proto = out.File
	file_work_proto_rawDesc = nil
	file_work_proto_goTypes = nil
	file_work_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WorkServiceClient is the client API for WorkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkServiceClient interface {
	ReadAllWork(ctx context.Context, in *ListWorkRequest, opts ...grpc.CallOption) (*ListWorkResponse, error)
	CreateWork(ctx context.Context, in *DataWork, opts ...grpc.CallOption) (*IdWork, error)
	DeleteWork(ctx context.Context, in *IdWork, opts ...grpc.CallOption) (*StatusWorkResponse, error)
	UpdateWork(ctx context.Context, in *DataWork, opts ...grpc.CallOption) (*StatusWorkResponse, error)
}

type workServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkServiceClient(cc grpc.ClientConnInterface) WorkServiceClient {
	return &workServiceClient{cc}
}

func (c *workServiceClient) ReadAllWork(ctx context.Context, in *ListWorkRequest, opts ...grpc.CallOption) (*ListWorkResponse, error) {
	out := new(ListWorkResponse)
	err := c.cc.Invoke(ctx, "/work.WorkService/ReadAllWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) CreateWork(ctx context.Context, in *DataWork, opts ...grpc.CallOption) (*IdWork, error) {
	out := new(IdWork)
	err := c.cc.Invoke(ctx, "/work.WorkService/CreateWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) DeleteWork(ctx context.Context, in *IdWork, opts ...grpc.CallOption) (*StatusWorkResponse, error) {
	out := new(StatusWorkResponse)
	err := c.cc.Invoke(ctx, "/work.WorkService/DeleteWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) UpdateWork(ctx context.Context, in *DataWork, opts ...grpc.CallOption) (*StatusWorkResponse, error) {
	out := new(StatusWorkResponse)
	err := c.cc.Invoke(ctx, "/work.WorkService/UpdateWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkServiceServer is the server API for WorkService service.
type WorkServiceServer interface {
	ReadAllWork(context.Context, *ListWorkRequest) (*ListWorkResponse, error)
	CreateWork(context.Context, *DataWork) (*IdWork, error)
	DeleteWork(context.Context, *IdWork) (*StatusWorkResponse, error)
	UpdateWork(context.Context, *DataWork) (*StatusWorkResponse, error)
}

// UnimplementedWorkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWorkServiceServer struct {
}

func (*UnimplementedWorkServiceServer) ReadAllWork(context.Context, *ListWorkRequest) (*ListWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllWork not implemented")
}
func (*UnimplementedWorkServiceServer) CreateWork(context.Context, *DataWork) (*IdWork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWork not implemented")
}
func (*UnimplementedWorkServiceServer) DeleteWork(context.Context, *IdWork) (*StatusWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWork not implemented")
}
func (*UnimplementedWorkServiceServer) UpdateWork(context.Context, *DataWork) (*StatusWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWork not implemented")
}

func RegisterWorkServiceServer(s *grpc.Server, srv WorkServiceServer) {
	s.RegisterService(&_WorkService_serviceDesc, srv)
}

func _WorkService_ReadAllWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).ReadAllWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/work.WorkService/ReadAllWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).ReadAllWork(ctx, req.(*ListWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_CreateWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataWork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).CreateWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/work.WorkService/CreateWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).CreateWork(ctx, req.(*DataWork))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_DeleteWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdWork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).DeleteWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/work.WorkService/DeleteWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).DeleteWork(ctx, req.(*IdWork))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_UpdateWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataWork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).UpdateWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/work.WorkService/UpdateWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).UpdateWork(ctx, req.(*DataWork))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "work.WorkService",
	HandlerType: (*WorkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadAllWork",
			Handler:    _WorkService_ReadAllWork_Handler,
		},
		{
			MethodName: "CreateWork",
			Handler:    _WorkService_CreateWork_Handler,
		},
		{
			MethodName: "DeleteWork",
			Handler:    _WorkService_DeleteWork_Handler,
		},
		{
			MethodName: "UpdateWork",
			Handler:    _WorkService_UpdateWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "work.proto",
}
